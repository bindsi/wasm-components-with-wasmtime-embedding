package data:transformer;

/// Transformer world specifying the available message transforming functions.
world transformer {
    // Imports are the functions/interfaces which are imported into wasm component.
    // It is host's (or other components in the same parent component) responsibility to inject imports when loading the component to satisfy these dependencies for the wasm component.
    /// Converts pressure from bar to psi unit. Connecting one component's imports to another component's matching exports is called composition.
    import message-transformers;
    
    // Import library component in this world.
    // TODO: This however fails main/host as it cannot find the deps, possibly split interfaces so they can be used in different worlds i.e. one for 
    import data:validator/unit-validator;

    // Exports should be available to host when wasm component is loaded.
    // It is wasm component's responsibility to provide these exported functions/interfaces to the host, which host can call.
    /// Entry point for wasm component.
    export component-runner;
}

interface message-transformers {
    convert-to-psi: func(bar-pressure: f32) -> f32;
    convert-to-bar: func(psi-pressure: f32) -> f32;
}

interface component-runner {
    run: func(source: string) -> f32;
}
